module trans/semantics/expressions

imports
  src-gen/ds-signatures/Common-sig
  trans/semantics/desugared-sig
  trans/semantics/values
  trans/semantics/natives/arithmetics

signature
  native operators
    eqV: V * V -> Bool
    notB: Bool -> Bool
    andB: Bool * Bool -> Bool
    orB: Bool * Bool -> Bool
    concatS: String * String -> String
    isS : V -> Bool
  
  native operators
    v2s : V -> String
    
rules

  VarRead(__String2ID__(name)) --> lookup(name).
  
  VarWrite(__String2ID__(name), v) --> write(name, v).
  
  Int(__String2INT__(s)) --> NumV(newBigInteger(s)).
  
  Sub(NumV(i1), NumV(i2)) --> NumV(subtract[i1](i2)).
  Mul(NumV(i1), NumV(i2)) --> NumV(multiply[i1](i2)).
  Div(NumV(i1), NumV(i2)) --> NumV(divide[i1](i2)).
  
  String(__String2STRING__(s)) --> StringV(s).
  
  Add(v1, v2) --> vout
  where
    orB(isS(v1), isS(v2)) == true
    < {
      StringV(concatS(v2s(v1), v2s(v2))) => vout
    } + {
      v1 => NumV(i1);
      v2 => NumV(i2);
      NumV(add[i1](i2)) => vout
    }.
  
  True() --> BoolV(true).
  False() --> BoolV(false).
  
  Eq(v1, v2) --> BoolV(eqV(v1, v2)).
  
  Neq(v1, v2) --> BoolV(notB(eqV(v1, v2))).
  
  Lte(NumV(i1), NumV(i2)) --> BoolV(lteI(i1, i2)).
  Lt(NumV(i1), NumV(i2)) --> BoolV(ltI(i1, i2)).
  Gte(NumV(i1), NumV(i2)) --> BoolV(lteI(i2, i1)).
  Gt(NumV(i1), NumV(i2)) --> BoolV(ltI(i2, i1)).
  
  And(BoolV(b1), BoolV(b2)) --> BoolV(andB(b1, b2)).
  Or(BoolV(b1), BoolV(b2)) --> BoolV(orB(b1, b2)).
  Not(BoolV(b)) --> BoolV(notB(b)).


module trans/semantics/control-flow

imports
  trans/semantics/desugared-sig
  trans/semantics/values

rules
  
  While(e, b) --> U()
   where
     onBreak(onContinue(loop2stmt(loopSpec(expandBoolV(e), __Block2Stmt__(b))))) --> _.
//     onBreak(onContinue(loop2stmt(loop(expandBoolV(e), __Block2Stmt__(b))))) --> _.
//    loop2stmt(loop(expandBoolV(e), __Block2Stmt__(b))) --> _.
//     onBreak(onContinue(whileHelper(e, __Block2Stmt__(b)))) --> _.

signature
  sorts
    Loop
  
  constructors
    loop: BoolVExpand * Stmt -> Loop
    loopSpec: BoolVExpand * Stmt -> Loop
    loop2stmt : Loop -> Stmt
  
  arrows
    Loop --> U // natively implemented
  
  sorts
    BoolVExpand
  
  constructors
    expandBoolV : Expr -> BoolVExpand
  
  arrows
    BoolVExpand --> Bool

rules

  loop2stmt(l) --> l.

  expandBoolV(e) --> bv
  where
    e --> BoolV(bv).
  
  l@loopSpec(boolexp, stmt) :: C, E --> U() :: C''', E'''
  where
    boolexp :: C, E --> bv :: C', E';
    bv == true
    < {
      stmt :: C', E' --> _ :: C'', E'';
      l :: C'', E'' --> _ :: C''', E'''
    } + {
      C => C''';
      E => E'''
//      U() => u
    }.

//signature
//  constructors
//    whileHelper : Expr * Stmt -> Stmt

//rules

//  w@whileHelper(BoolV(bv), ss) :: C, E --> u :: C'', E''
//  where
//    bv == true
//    < {
//      ss :: C, E --> _ :: C', E';
//      w :: C', E' --> _ :: C'', E'';
//      U() => u
//    } + {
//      U() => u;
//      C => C'';
//      E => E''
//    }.
 
//  w@whileHelper(BoolV(true), ss) --> U()
//  where
//    ss --> _;
//    w --> _.
//  
//  whileHelper(BoolV(false), _) --> U().

signature
  sorts
    BreakHandler
    ContinueHandler
    
  constructors
    doBreak : BreakHandler // will throw a BreakException with the value and the semantic components 
    onBreak : Stmt -> Stmt // will handle a BreakException with the value and the semantic components
    doContinue : ContinueHandler // will throw a ContinueException with the value and the semantic components
    onContinue : Stmt -> Stmt // will handle a ContinueException with the value and the semantic components  

   arrows
     BreakHandler --> U // natively implemented
     ContinueHandler --> U // natively implemented

rules
  
  Continue() --> u
  where
    doContinue() --> u.
  
  Break() --> u
  where
    doBreak() --> u.

rules

  IfThenElse(e, Block(s1), Block(s2)) :: C, E --> u :: C'', E''
  where
    e :: C, E --> BoolV(bv) :: C', E';
    bv == true
    < {
      s1 :: C', E' --> _ :: C'', E'';
      U() => u
    } + {
      s2 :: C', E' --> _ :: C'', E'';
      U() => u
    }.


//  IfThenElse(BoolV(true), Block(s1), _) --> s1.
//  
//  IfThenElse(BoolV(false), _, Block(s2)) --> s2.
  
  Stmt(e) --> U()
  where
    e --> _.
  
  __Block2Stmt__(Block(ss)) --> U()
  where
    ss --> _.
  
signature
  arrows
    List(Stmt) --> U

rules

  stmts : List(Stmt) :: C, E --> U() :: C'', E''
  where
    stmts => [s | xs]
    < {
      s :: C, E --> _ :: C', E';
      xs :: C', E' --> _ :: C'', E''
    } + {
      C => C'';
      E => E''
    }.

//  [] : List(Stmt) --> U().
//  
//  [s | xs] : List(Stmt) --> U()
//  where
//    s --> _;
//    xs --> _.

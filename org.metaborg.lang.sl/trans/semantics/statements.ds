module trans/semantics/control-flow

imports
  trans/semantics/desugared-sig
  trans/semantics/values

rules
  
  While(e, b) --> U()
   where
     onBreak(onContinue(loop2stmt(loopSpec(expandBoolV(e), __Block2Stmt__(b))))) --> _.

signature
  sorts
    Loop
  
  constructors
    loop: BoolVExpand * Stmt -> Loop
    loopSpec: BoolVExpand * Stmt -> Loop
    loop2stmt : Loop -> Stmt
  
  arrows
    Loop --> U // natively implemented
  
  sorts
    BoolVExpand
  
  constructors
    expandBoolV : Expr -> BoolVExpand
  
  arrows
    BoolVExpand --> Bool

rules

  loop2stmt(l) --> l.

  expandBoolV(e) --> bv
  where
    e --> BoolV(bv).
  
//  l@loopSpec(boolexp, stmt) :: C, E --> U() :: C''', E'''
//  where
//    boolexp :: C, E --> bv :: C', E';
//    case bv of {
//      true =>
//        stmt :: C', E' --> _ :: C'', E'';
//        l :: C'', E'' --> _ :: C''', E'''
//      otherwise =>
//        C' => C''';
//        E' => E'''
//    }.
  
  l@loopSpec(boolexp, stmt) --> U()
  where
    boolexp --> bv;
    case bv of {
      true =>
        stmt --> _;
        l --> _
      otherwise =>
    }.

signature
  sorts
    BreakHandler
    ContinueHandler
    
  constructors
    doBreak : BreakHandler // will throw a BreakException with the value and the semantic components 
    onBreak : Stmt -> Stmt // will handle a BreakException with the value and the semantic components
    doContinue : ContinueHandler // will throw a ContinueException with the value and the semantic components
    onContinue : Stmt -> Stmt // will handle a ContinueException with the value and the semantic components  

   arrows
     BreakHandler --> U // natively implemented
     ContinueHandler --> U // natively implemented

rules
  
  Continue() --> u
  where
    doContinue() --> u.
  
  Break() --> u
  where
    doBreak() --> u.

rules
  
//  IfThenElse(e, Block(s1), Block(s2)) :: C, E --> U() :: C'', E''
//  where
//    e :: C, E --> bv :: C', E';
//    case bv of {
//      BoolV(true) =>
//        s1 :: C', E' --> _ :: C'', E''
//      BoolV(false) =>
//        s2 :: C', E' --> _ :: C'', E''
//    }.

  IfThenElse(e, Block(s1), Block(s2)) --> U()
  where
    e --> bv;
    case bv of {
      BoolV(true) =>
        s1 --> _
      BoolV(false) =>
        s2 --> _
    }.

  Stmt(e) --> U()
  where
    e --> _.
  
  __Block2Stmt__(Block(ss)) --> U()
  where
    ss --> _.
  
signature
  arrows
    List(Stmt) --> U
  arrows
    stmts_aux(List(Stmt), U) --> U

rules

  stmts_aux(stmts, u) --> u
  where
    case stmts of {
      [s | stmts'] =>
        s --> _;
        stmts_aux(stmts', u) --> _
      otherwise =>
    }.

  stmts : List(Stmt) --> u
  where
    stmts_aux(stmts, U()) --> u.

//  stmts : List(Stmt) :: C, E --> U() :: C'', E''
//  where
//    stmts => [s | xs]
//    < {
//      s :: C, E --> _ :: C', E';
//      xs :: C', E' --> _ :: C'', E''
//    } + {
//      C => C'';
//      E => E''
//    }.

//  [] : List(Stmt) --> U().
//  
//  [s | xs] : List(Stmt) --> U()
//  where
//    s --> _;
//    xs --> _.

module trans/semantics/control-flow

imports
  trans/semantics/desugared-sig
  trans/semantics/values

// While loops
signature
  constructors
  whileHelper : Expr * List(Stmt) -> Stmt

rules
  
  While(e, Block(ss)) --> U()
   where
     onBreak(onContinue(whileHelper(e, ss))) --> _.
 
  w@whileHelper(e, ss) :: C, E --> u :: C''', E'''
  where
    e :: C, E --> BoolV(bv) :: C', E';
    bv == true
    < {
      ss :: C', E' --> _ :: C'', E'';
      w :: C'', E'' --> _ :: C''', E''';
      U() => u
    } + {
      E' => E''';
      C' => C''';
      U() => u
    }.


signature
  sorts
    BreakHandler
    ContinueHandler
    
  constructors
    doBreak : BreakHandler // will throw a BreakException with the value and the semantic components 
    onBreak : Stmt -> Stmt // will handle a BreakException with the value and the semantic components
    doContinue : ContinueHandler // will throw a ContinueException with the value and the semantic components
    onContinue : Stmt -> Stmt // will handle a ContinueException with the value and the semantic components  

   arrows
     BreakHandler --> U // natively implemented
     ContinueHandler --> U // natively implemented

rules
  
  Continue() --> u
  where
    doContinue() --> u.
  
  Break() --> u
  where
    doBreak() --> u.

rules

  IfThenElse(e, Block(s1), Block(s2)) :: C, E --> u :: C'', E''
  where
    e :: C, E --> BoolV(bv) :: C', E';
    bv == true
    < {
    	s1 :: C', E' --> _ :: C'', E'';
    	U() => u
    } + {
    	s2 :: C', E' --> _ :: C'', E'';
    	U() => u
    }.
  
  Stmt(e) --> U()
  where
    e --> _.
  
  __Block2Stmt__(Block(ss)) --> ss.
  
signature
  arrows
    List(Stmt) --> U

rules

  stmts : List(Stmt) :: C, E --> U() :: C'', E''
  where
    stmts => [s | xs]
    < {
      s :: C, E --> _ :: C', E';
      xs :: C', E' --> _ :: C'', E''
    } + {
      C => C'';
      E => E''
    }.

